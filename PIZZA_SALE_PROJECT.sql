-- PIZZA_SALE_PROJECT.

CREATE DATABASE PIZZA_SALE;
USE PIZZA_SALE;
CREATE TABLE order_detail (
    order_details_id INT PRIMARY KEY,
    order_id INT,
    pizza_id VARCHAR(50),
    quantity INT
);
-- I ALREADY INSERT THE DATA USING DATA IMPORT WIZARD.
SELECT * FROM ORDER_DETAIL;
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    order_date DATE,
    order_time TIME
);
-- I ALREADY INSERT THE DATA USING DATA IMPORT WIZARD.
SELECT * FROM ORDERS;

CREATE TABLE pizza (
    pizza_id VARCHAR(50) PRIMARY KEY,
    pizza_type_id VARCHAR(50),
    size CHAR(1),
    price DECIMAL(5,2)
);
-- I ALREADY INSERT THE DATA USING DATA IMPORT WIZARD.
SELECT * FROM PIZZA;

CREATE TABLE pizza_types (
    pizza_type_id VARCHAR(50) PRIMARY KEY,
    name VARCHAR(100),
    category VARCHAR(50),
    ingredients TEXT
);
-- I ALREADY INSERT THE DATA USING DATA IMPORT WIZARD.
SELECT * FROM PIZZA_TYPES;

------------- BASIC QUESTIONS ------------
 
-- Q1.Retrieve the total number of orders placed.
SELECT COUNT(ORDER_ID) AS TOTAL_ORDERS FROM ORDERS;

-- Q2. Calculate the total revenue generated from pizza sales. REVENUE = QUANTITY * PRICE.
SELECT ROUND(SUM(ORDER_DETAIL.QUANTITY * PIZZA.PRICE ),0) AS  TOTAL_REVENUE FROM ORDER_DETAIL JOIN PIZZA ON ORDER_DETAIL.PIZZA_ID = PIZZA.PIZZA_ID;


-- Q3.Identify the highest-priced pizza.
SELECT PIZZA_TYPES.NAME,PIZZA.PRICE FROM PIZZA_TYPES JOIN PIZZA ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZA.PIZZA_TYPE_ID ORDER BY PIZZA.PRICE DESC LIMIT 1;


-- Q4.Identify the most common pizza size ordered.
SELECT PIZZA.SIZE,COUNT(PIZZA.SIZE) AS NO_OF_ORDERS FROM PIZZA GROUP BY SIZE order by NO_OF_ORDERS DESC;


-- Q5.List the top 5 most ordered pizza types along with their quantities.
SELECT PIZZA.PIZZA_TYPE_ID,COUNT(ORDER_DETAIL.QUANTITY) AS TOTAL_NO_ORDERS FROM PIZZA JOIN ORDER_DETAIL ON PIZZA.PIZZA_ID = ORDER_DETAIL.PIZZA_ID GROUP BY PIZZA.PIZZA_TYPE_ID ORDER BY TOTAL_NO_ORDERS DESC LIMIT 5;

-------- INTERMEDIATE QUESTIONS------------
-- Q6.Join the necessary tables to find the total quantity of each pizza category ordered.
SELECT PIZZA_TYPES.CATEGORY,SUM(ORDER_DETAIL.QUANTITY) AS TOTAL_PIZZA_ORDER FROM PIZZA_TYPES JOIN PIZZA ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZA.PIZZA_TYPE_ID JOIN ORDER_DETAIL ON PIZZA.PIZZA_ID = ORDER_DETAIL.PIZZA_ID GROUP BY PIZZA_TYPES.CATEGORY;

-- Q7.Determine the distribution of orders by hour of the day.
SELECT hour(ORDER_TIME) AS HOUR_OF_DAY,COUNT((ORDER_TIME)) AS NO_OF_ORDERS FROM ORDERS GROUP BY HOUR_OF_DAY ;

-- Q8.Determine the distribution of orders by DAY of the MONTH.
SELECT DAY(ORDER_DATE) AS DATE_, month(ORDER_DATE) AS MONTH_ ,COUNT(ORDER_DATE) AS NO_OF_ORDERS FROM ORDERS group by DATE_,MONTH_ ORDER BY DATE_;

-- Q9.Join relevant tables to find the category-wise total number of orders of pizzas.
SELECT PIZZA_TYPES.CATEGORY,COUNT(PIZZA_TYPES.CATEGORY) AS TOTAL_ORDER FROM PIZZA_TYPES JOIN PIZZA ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZA.PIZZA_TYPE_ID JOIN ORDER_DETAIL ON PIZZA.PIZZA_ID = ORDER_DETAIL.PIZZA_ID JOIN ORDERS ON ORDER_DETAIL.ORDER_ID = ORDERS.ORDER_ID group by CATEGORY;

-- Q10.Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT ORDER_DATE , SUM(ORDER_DETAIL.QUANTITY)/COUNT(DISTINCT ORDER_DETAIL.ORDER_ID) AS AVG_PIZZA_ORDER_PER_DAY FROM ORDER_DETAIL JOIN ORDERS ON ORDER_DETAIL.ORDER_ID = ORDERS.ORDER_ID group by ORDER_DATE;

-- Q11.Determine the top 3 most ordered pizza types based on revenue.
SELECT PIZZA_TYPES.PIZZA_TYPE_ID,ROUND(SUM(PIZZA.PRICE * ORDER_DETAIL.QUANTITY),0) AS TOTAL_REVENUE FROM PIZZA_TYPES JOIN PIZZA ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZA.PIZZA_TYPE_ID JOIN ORDER_DETAIL ON PIZZA.PIZZA_ID = ORDER_DETAIL.PIZZA_ID GROUP BY PIZZA.PIZZA_TYPE_ID ORDER BY TOTAL_REVENUE DESC LIMIT 3;
 
 --------- ADVANCE QUESTIONS ----------------
 -- Q12. Determine the top 3 most ordered pizza types based on revenue for each pizza category.
 WITH TOP_PIZZA AS (SELECT PIZZA_TYPES.CATEGORY ,PIZZA_TYPES.NAME, ROUND(SUM(PIZZA.PRICE * ORDER_DETAIL.QUANTITY),0) AS TOTAL_REVENUE , dense_rank() OVER (partition by PIZZA_TYPES.CATEGORY ORDER BY TOTAL_REVENUE DESC ) AS RANK_ FROM PIZZA_TYPES JOIN PIZZA ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZA.PIZZA_TYPE_ID JOIN ORDER_DETAIL ON PIZZA.PIZZA_ID = ORDER_DETAIL.PIZZA_ID GROUP BY PIZZA_TYPES.PIZZA_TYPE_ID,CATEGORY ) SELECT * FROM TOP_PIZZA  WHERE RANK_ <4 ORDER BY CATEGORY,RANK_;

-- Q13. Calculate the percentage contribution of each pizza type to total revenue.

SELECT PIZZA_TYPES.PIZZA_TYPE_ID,ROUND(SUM(PIZZA.PRICE * ORDER_DETAIL.QUANTITY), 0) AS TOTAL_REVENUE,ROUND((SUM(PIZZA.PRICE * ORDER_DETAIL.QUANTITY) / (SELECT SUM(PIZZA.PRICE * ORDER_DETAIL.QUANTITY) FROM PIZZA JOIN ORDER_DETAIL ON PIZZA.PIZZA_ID = ORDER_DETAIL.PIZZA_ID) ) * 100, 2) AS PERCENTAGE_CONTRIBUTION
FROM PIZZA_TYPES
JOIN PIZZA ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZA.PIZZA_TYPE_ID
JOIN ORDER_DETAIL ON PIZZA.PIZZA_ID = ORDER_DETAIL.PIZZA_ID
GROUP BY PIZZA_TYPES.PIZZA_TYPE_ID
ORDER BY PERCENTAGE_CONTRIBUTION DESC;


-- Q14.Analyze the cumulative revenue generated over time.
SELECT ORDER_DATE,SUM(REVENUE) OVER ( ORDER BY ORDER_DATE) AS CUMMULATIVE_SUM FROM (SELECT ORDERS.ORDER_DATE,SUM(PIZZA.PRICE * ORDER_DETAIL.QUANTITY) AS REVENUE FROM ORDERS JOIN ORDER_DETAIL ON ORDERS.ORDER_ID = ORDER_DETAIL.ORDER_ID JOIN PIZZA ON ORDER_DETAIL.PIZZA_ID = PIZZA.PIZZA_ID GROUP BY ORDER_DATE) AS T1








